/****************************************************************************
 * Copyright 2021 EPAM Systems
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ***************************************************************************/
import { Vec2 } from "../../../domain/entities";
import { CoreEditor } from "../internal";
import { BaseTool } from "./Tool";
declare class SelectRectangle implements BaseTool {
    private editor;
    private brush;
    private brushArea;
    private moveStarted;
    private mousePositionAfterMove;
    private mousePositionBeforeMove;
    private canvasResizeObserver?;
    private history;
    private previousSelectedEntities;
    constructor(editor: CoreEditor);
    private createBrush;
    private startMoveIfNeeded;
    mousedown(event: any): void;
    static calculateAngleSnap(cursorPosition: Vec2, connectedPosition: Vec2, snapAngle: number): {
        isAngleSnapped: false;
        angleSnapPosition?: undefined;
        snappedAngleRad?: undefined;
    } | {
        isAngleSnapped: true;
        angleSnapPosition: Vec2;
        snappedAngleRad: number;
    };
    static calculateDistanceSnap(cursorPosition: Vec2, connectedPosition: Vec2, snappedAngle: number | undefined): {
        isDistanceSnapped: false;
        distanceSnapPosition?: undefined;
    } | {
        isDistanceSnapped: true;
        distanceSnapPosition: Vec2;
    };
    private tryToSnap;
    mousemove(event: MouseEvent): void;
    mouseup(event: any): void;
    mouseOverDrawingEntity(event: any): void;
    mouseLeaveDrawingEntity(event: any): void;
    mouseOverPolymerBond(event: any): void;
    mouseLeavePolymerBond(event: any): void;
    setSelectedEntities(): void;
    destroy(): void;
}
export { SelectRectangle };
