{"version":3,"file":"indigoWorker.types-944da651.js","sources":["../../src/infrastructure/services/struct/indigoWorker.types.ts"],"sourcesContent":["/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\nimport { IKetMacromoleculesContent } from 'ketcher-core';\n\n// TODO add typings for Indigo standalone object\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type IndigoStandalone = any;\n\nexport const enum Command {\n  Info,\n  Convert,\n  Layout,\n  Clean,\n  Aromatize,\n  Dearomatize,\n  CalculateCip,\n  Automap,\n  Check,\n  Calculate,\n  GenerateImageAsBase64,\n  GetInChIKey,\n  ExplicitHydrogens,\n}\n\nexport const enum WorkerEvent {\n  Info = 'info',\n  Convert = 'convert',\n  Layout = 'layout',\n  Clean = 'clean',\n  Aromatize = 'aromatize',\n  Dearomatize = 'dearomatize',\n  CalculateCip = 'calculateCip',\n  Automap = 'automap',\n  Check = 'check',\n  Calculate = 'calculate',\n  GenerateImageAsBase64 = 'generateImageAsBase64',\n  GetInChIKey = 'getInChIKey',\n  ExplicitHydrogens = 'convert_explicit_hydrogens',\n}\n\nexport enum SupportedFormat {\n  Rxn = 'rxnfile',\n  Mol = 'molfile',\n  Smiles = 'smiles',\n  Smarts = 'smarts',\n  CML = 'cml',\n  InChI = 'inchi',\n  InChIAuxInfo = 'inchi-aux',\n  InChIKey = 'inchi-key',\n  Ket = 'ket',\n  CDX = 'cdx',\n  CDXML = 'cdxml',\n  SDF = 'sdf',\n  FASTA = 'fasta',\n  SEQUENCE = 'sequence',\n  SEQUENCE_3_LETTER = 'peptide-sequence-3-letter',\n  IDT = 'idt',\n  HELM = 'helm',\n  RDF = 'rdf',\n}\n\nexport interface WithStruct {\n  struct: string;\n}\n\nexport interface WithFormat {\n  format: SupportedFormat;\n}\n\nexport interface WithSelection {\n  selectedAtoms: Array<number>;\n}\n\nexport interface CommandOptions {\n  [key: string]:\n    | IKetMacromoleculesContent\n    | string\n    | number\n    | boolean\n    | undefined;\n}\n\nexport interface CommandData {\n  options?: CommandOptions;\n}\n\nexport interface CheckCommandData extends CommandData, WithStruct {\n  types: Array<string>;\n}\n\nexport interface ConvertCommandData\n  extends CommandData,\n    WithStruct,\n    WithFormat {}\n\nexport interface GenerateInchIKeyCommandData extends CommandData, WithStruct {}\n\nexport interface GenerateImageCommandData extends CommandData, WithStruct {\n  outputFormat: 'png' | 'svg';\n  backgroundColor?: string;\n  bondThickness?: number;\n}\n\nexport interface LayoutCommandData\n  extends CommandData,\n    WithStruct,\n    WithFormat {}\n\nexport interface CleanCommandData\n  extends CommandData,\n    WithStruct,\n    WithSelection,\n    WithFormat {}\n\nexport interface AromatizeCommandData\n  extends CommandData,\n    WithStruct,\n    WithFormat {}\n\nexport interface DearomatizeCommandData\n  extends CommandData,\n    WithStruct,\n    WithFormat {}\n\nexport interface CalculateCipCommandData\n  extends CommandData,\n    WithStruct,\n    WithFormat {}\n\nexport type CalculateProps =\n  | 'molecular-weight'\n  | 'most-abundant-mass'\n  | 'monoisotopic-mass'\n  | 'gross'\n  | 'gross-formula'\n  | 'mass-composition';\n\nexport interface CalculateCommandData\n  extends CommandData,\n    WithStruct,\n    WithSelection {\n  properties: Array<string>;\n}\n\nexport interface AutomapCommandData\n  extends CommandData,\n    WithStruct,\n    WithFormat {\n  mode: string;\n}\n\nexport interface ExplicitHydrogensCommandData\n  extends CommandData,\n    WithStruct,\n    WithFormat {\n  mode: 'auto' | 'fold' | 'unfold';\n}\n\ninterface OutputMessageBase {\n  type?: Command;\n  hasError?: boolean;\n}\n\ninterface OutputMessageWithError extends OutputMessageBase {\n  hasError: true;\n  error: string;\n  inputData?: string;\n}\n\ninterface OutputMessageWithoutError<T> extends OutputMessageBase {\n  hasError?: false;\n  payload: T;\n  inputData?: string;\n}\n\nexport type OutputMessage<T> =\n  | OutputMessageWithError\n  | OutputMessageWithoutError<T>;\n\nexport interface InputMessage<T> {\n  type: Command;\n  data: T;\n}\n\nexport interface OutputMessageWrapper<T = string> {\n  data: OutputMessage<T>;\n}\n"],"names":["Command","WorkerEvent","SupportedFormat"],"mappings":"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"}